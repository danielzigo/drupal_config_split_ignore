<?php

/**
 * @file
 * Hooks implemented by the Configuration Split Ignore module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Config\Entity\ConfigEntityInterface;
use Drupal\Core\Config\StorageComparer;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function config_split_ignore_form_config_split_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_split */
  $config_split = $form_state->getFormObject()->getEntity();

  $description = t('One configuration name per line.<br />
Examples: <ul>
<li>contact.settings</li>
<li>webform.webform.* (will ignore all config entities that starts with <em>webform.webform</em>)</li>
<li>*.contact_message.custom_contact_form.* (will ignore all config entities that starts with <em>.contact_message.custom_contact_form.</em> like fields attached to a custom contact form)</li>
<li>~webform.webform.contact (will force import for this configuration, even if ignored by a wildcard)</li>
<li>webform.webform.contact:title (will ignore the title of the webform, but will not ignore other webform.webform.contact configuration.)</li>
</ul>');

  $form['config_split_ignore_fieldset'] = [
    '#type' => 'fieldset',
    '#title' => t('Configuration Split Ignore Settings'),
    '#description' => t('These configuration entities will be ignored when exported or imported, they are deleted when the split becomes inactive. In most cases they are a subset of configuration entities listed in the Complete Split section.'),
  ];

  $form['config_split_ignore_fieldset']['config_split_ignore'] = [
    '#type' => 'textarea',
    '#rows' => 10,
    '#title' => t('Configuration entity names to ignore'),
    '#description' => $description,
    '#default_value' => implode("\n", $config_split->getThirdPartySetting('config_split_ignore', 'entities', [])),
    '#size' => 60,
  ];

  $form['#entity_builders'][] = 'config_split_ignore_config_split_edit_form_builder';
}

/**
 * Entity builder for the Configuration Split config entity.
 */
function config_split_ignore_config_split_edit_form_builder($entity_type, ConfigEntityInterface $config_split, &$form, FormStateInterface $form_state) {
  $entities_str = trim($form_state->getValue('config_split_ignore'));
  $entities = [];

  if (!empty($entities_str)) {
    $entities = array_values(array_filter(array_map('trim', preg_split("[\n|\r]", $entities_str))));
  }

  if (!empty($entities)) {
    $config_split->setThirdPartySetting('config_split_ignore', 'entities', $entities);
  }
  else {
    $config_split->unsetThirdPartySetting('config_split_ignore', 'entities');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function config_split_ignore_form_config_admin_import_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // The code fragment is taken from config_ignore.module source.
  // Load Services that we need.
  $stock_storage_sync = \Drupal::service('config_filter.storage_factory')->getSyncWithoutExcluded(['config_split_ignore']);
  $active_storage_sync = \Drupal::service('config.storage.sync');
  $storage = \Drupal::service('config.storage');
  $config_manager = \Drupal::service('config.manager');

  // Create two StorageComparer objects, one with the filter enabled and one
  // as without. We will compare them later to see what changes that has been
  // ignored.
  $unfiltered_storage_compare = new StorageComparer($stock_storage_sync, $storage, $config_manager);
  $filtered_storage_compare = new StorageComparer($active_storage_sync, $storage, $config_manager);
  $unfiltered_storage_compare->createChangelist();
  $filtered_storage_compare->createChangelist();

  // Create an array of the changes with the filter on.
  $config_changes = [];
  foreach ($filtered_storage_compare->getChangelist() as $config_names) {
    foreach ($config_names as $config_name) {
      $config_changes[] = $config_name;
    }
  }

  foreach ($unfiltered_storage_compare->getAllCollectionNames() as $collection) {
    foreach ($unfiltered_storage_compare->getChangelist(NULL, $collection) as $config_change_type => $config_names) {
      foreach ($config_names as $config_name) {
        // If the config name exists here, but not in the $config_changes array
        // the it's because it's getting ignored.
        if (!in_array($config_name, $config_changes)) {
          $ignored_config_entities[] = [
            $config_name,
            $config_change_type,
          ];
        }
      }
    }
  }

  // Build a table of changes that are not going to happen, due to the ignored
  // config entities.
  if (!empty($ignored_config_entities)) {
    $form['split_ignored'] = [
      '#type' => 'table',
      '#header' => ['Config name', 'Action'],
      '#caption' => t('<h3>The following configuration entities are ignored due to the <a href="@url">Configuration Split Ignore Settings</a> and therefore not displayed in the list above</h3>', [
        '@url' => Url::fromRoute('entity.config_split.collection')->toString(),
      ]),
      '#rows' => $ignored_config_entities,
    ];
  }

}
